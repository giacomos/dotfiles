#
# WMFS2 configuration file
#
@include ~/.config/wmfs/wmfs_rules
@include ~/.config/wmfs/wmfs_themes


[bars]

  # Position:
  #
  # 0  Top
  # 1  Bottom
  # 2  Hide

  # Element type:
  #
  # t  Tags
  # s  Statustext (will take available space)
  # y  Systray (can be set only ONE time among all element)
  # l  Launcher (will be expended at launcher use)

  [bar]
     position = 0
     screen = 0
     elements = "tlsy"   # element order in bar
     theme = "default"
  [/bar]
  [bar]
     position = 0
     screen = 1
     elements = "ts"   # element order in bar
     theme = "secondscreen"
  [/bar]

  [bar]
     name = "bartest"
     position = 2
     screen = 0
     elements = "s"
     theme = "default"
  [/bar]

[/bars]

[tags]

  # Tag wrapping navigation
  circular = false

  # Use no screen option or screen = -1 to set tag on each screen
  [tag]
      screen = 0
      name = "1: WWW"
#      statusline="^i[15;2;15;15;/home/jack/wmfs/icons/www.png]"
  [/tag]

  [tag]
      screen = 0
      name = "2:   " 
      statusline="^i[18;2;15;15;/home/jack/wmfs/icons/term.png]"
  [/tag]
  [tag]
      screen = 0
      name = "3:   "
      statusline="^i[18;2;15;15;/home/jack/wmfs/icons/mail.png]"
  [/tag]
  [tag]
      screen = 0
      name = "4:   "
      statusline="^i[18;2;15;15;/home/jack/wmfs/icons/chat.png]"
  [/tag]
  [tag]
      screen = 0
      name = "5:   "
      statusline="^i[18;2;15;15;/home/jack/wmfs/icons/file.png]"
  [/tag]
  [tag] screen = 1  name = "6" [/tag]
  [tag] screen = 1  name = "7" [/tag]

  # Mousebinds associated to Tags element button
  [mouse] button = "1" func = "tag_click" [/mouse]
  [mouse] button = "5" func = "tag_next"  [/mouse]
  [mouse] button = "4" func = "tag_prev"  [/mouse]
[/tags]

[client]

  # Padding between clients (default: 0) :
  #padding = 75

  # Give focus to new created client (default = false)
  autofocus = false

  theme = "default"
  # The mod key used to drag&drop free clients
  key_modifier = "Super"

  # Focus type:
  #  enter : focus follow mouse (default)
  #  click : click to focus
  #  everything-else : disable mouse focus support
  focus = enter

  [mouse] button = "1" func = "client_focus_click"    [/mouse]
  [mouse] button = "1" func = "mouse_swap"            [/mouse]
  [mouse] button = "2" func = "mouse_tab"             [/mouse]
  [mouse] button = "3" func = "mouse_resize"          [/mouse]
  [mouse] button = "4" func = "client_focus_next_tab" [/mouse]
  [mouse] button = "5" func = "client_focus_prev_tab" [/mouse]

[/client]

[launchers]

  # command can be an uicb function or an uicb function + extension (see example)
  [launcher]
     name = "exec"
     prompt = "Run:"
     # Example of uicb + ext:
     #   command = "spawn xterm -e"
     command = "spawn"
     width = 150
  [/launcher]
  [launcher]
      name = "launcher_goto"
      prompt = "goto/open:"
      command = "spawn roxterm -e ranger"
      width = 300
  [/launcher]

[/launchers]

[keys]


  # Go to tag
  [key] mod = {"Super"} key = "1" func = "tag_set" cmd = "0" [/key]
  [key] mod = {"Super"} key = "2" func = "tag_set" cmd = "1" [/key]
  [key] mod = {"Super"} key = "3" func = "tag_set" cmd = "2" [/key]
  [key] mod = {"Super"} key = "4" func = "tag_set" cmd = "3" [/key]
  [key] mod = {"Super"} key = "5" func = "tag_set" cmd = "4" [/key]
  [key] mod = {"Super"} key = "6" func = "tag_set" cmd = "5" [/key]
  [key] mod = {"Super"} key = "7" func = "tag_set" cmd = "6" [/key]
  [key] mod = {"Super"} key = "8" func = "tag_set" cmd = "7" [/key]
  # Move active client to tag
  [key] mod = {"Super", "Shift"} key = "1" func = "tag_client" cmd = "0" [/key]
  [key] mod = {"Super", "Shift"} key = "2" func = "tag_client" cmd = "1" [/key]
  [key] mod = {"Super", "Shift"} key = "3" func = "tag_client" cmd = "2" [/key]
  [key] mod = {"Super", "Shift"} key = "4" func = "tag_client" cmd = "3" [/key]
  [key] mod = {"Super", "Shift"} key = "5" func = "tag_client" cmd = "4" [/key]
  [key] mod = {"Super", "Shift"} key = "6" func = "tag_client" cmd = "5" [/key]
  [key] mod = {"Super", "Shift"} key = "7" func = "tag_client" cmd = "6" [/key]
  [key] mod = {"Super", "Shift"} key = "8" func = "tag_client" cmd = "7" [/key]
  # Remove last tag
  [key] mod = {"Super"} key = "minus" func = "tag_del" [/key]
  # Add new tag
  [key] mod = {"Super", "Shift"} key = "minus" func = "tag_new" [/key]
  # Go to next tag
  [key] mod = {"Super", "Alt"} key = "Right" func = "tag_next" [/key]
  # Go to prev tag
  [key] mod = {"Super", "Alt"} key = "Left"  func = "tag_prev" [/key]
  # Focus next client with direction
  [key] mod = {"Super"} key = "Left"  func = "client_focus_left"   [/key]
  [key] mod = {"Super"} key = "Right" func = "client_focus_right"  [/key]
  [key] mod = {"Super"} key = "Up"    func = "client_focus_top"    [/key]
  [key] mod = {"Super"} key = "Down"  func = "client_focus_bottom" [/key]
  # Resize selected tiled client with direction
  [key] mod = {"Super"} key = "h" func = "client_resize_left"   cmd = "20" [/key]
  [key] mod = {"Super"} key = "l" func = "client_resize_left"   cmd = "-20" [/key]
  [key] mod = {"Super"} key = "k" func = "client_resize_top"    cmd = "20" [/key]
  [key] mod = {"Super"} key = "j" func = "client_resize_top"    cmd = "-20" [/key]
  [key] mod = {"Super", "Control"} key = "h" func = "client_resize_right"  cmd = "-20" [/key]
  [key] mod = {"Super", "Control"} key = "l" func = "client_resize_right"  cmd = "20" [/key]
  [key] mod = {"Super", "Control"} key = "k" func = "client_resize_bottom" cmd = "-20" [/key]
  [key] mod = {"Super", "Control"} key = "j" func = "client_resize_bottom" cmd = "20" [/key]
  # Tabbing command
  [key] mod = {"Alt", "Shift"} key = "h" func = "client_tab_left"   [/key]
  [key] mod = {"Alt", "Shift"} key = "l" func = "client_tab_right"  [/key]
  [key] mod = {"Alt", "Shift"} key = "k" func = "client_tab_top"    [/key]
  [key] mod = {"Alt", "Shift"} key = "j" func = "client_tab_bottom" [/key]
  [key] mod = {"Alt", "Shift"} key = "u" func = "client_untab" [/key]
  [key] mod = {"Super"}        key = "t" func = "client_tab_next_opened" [/key]
  # Close active client
  [key] mod = {"Super", "Shift"} key = "q" func = "client_close" [/key]
  # Focus next / prev client and next / prev tabbed client
  [key] mod = { "Alt" }            key = "Tab" func = "client_focus_next" [/key]
  [key] mod = { "Alt", "Shift" }   key = "Tab" func = "client_focus_prev" [/key]
  [key] mod = { "Super" }          key = "Tab" func = "client_focus_next_tab" [/key]
  [key] mod = { "Super", "Shift" } key = "Tab" func = "client_focus_prev_tab" [/key]
  # Go to next screen
  [key] mod = {"Super", "Alt"} key = "Up"  func = "screen_next" [/key]
  # Go to prev screen
  [key] mod = {"Super", "Alt"} key = "Down" func = "screen_prev" [/key]
  # move client to screen
  [key] mod = {"Super", "Shift"} key = "Up" func = "screen_move_client_next" [/key]
  [key] mod = {"Super", "Shift"} key = "Down" func = "screen_move_client_prev" [/key]
  # Layout manipulation
  [key] mod = {"Super"}          key = "m" func = "layout_vmirror" [/key]
  [key] mod = {"Super", "Shift"} key = "m" func = "layout_hmirror" [/key]
  [key] mod = {"Super"}          key = "r" func = "layout_rotate_right" [/key]
#  [key] mod = {"Super", "Shift"} key = "r" func = "layout_rotate_left" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "h" func = "layout_integrate_left" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "j" func = "layout_integrate_bottom" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "k" func = "layout_integrate_top" [/key]
  [key] mod = {"Control", "Super", "Alt"} key = "l" func = "layout_integrate_right" [/key]
  # Layout set historic travelling function (TESTING)
  [key] mod = {"Super"} key = "o" func = "layout_prev_set" [/key]
  [key] mod = {"Super", "Shift"} key = "o" func = "layout_next_set" [/key]
  # Toggle client free/tile
  [key] mod = {"Super", "Shift"} key = "f" func = "client_toggle_free" [/key]
  # Toggle client ignore_tag
  [key] mod = {"Super", "Alt"} key = "f" func = "client_toggle_ignore_tag" [/key]
  # Toggle infobar visibility
  [key] mod = {"Super", "Shift"} key = "h" func = "infobar_toggle_hide" [/key]

  # Launchers
  [key] mod = {"Super"} key = "p" func = "launcher" cmd = "exec" [/key]
  [key] mod = {"Super"} key = "d" func = "spawn" cmd = "dmenu_run -b -fn 'xft:Terminus:pixelsize=8' -nb '#191919' -nf '#9ac0cd' -sb '#191919' -sf '#bf3f34' -p 'search app >> '" [/key]
  [key] mod = {"Super"} key = "Return" func = "spawn" cmd = "roxterm || gnome-terminal || urxvt || xterm" [/key]
  [key] mod = {"Super", "Shift"} key = "Return" func = "spawn" cmd = "gnome-terminal || urxvt || xterm" [/key]
  [key] mod = {"Super"} key = "b" func = "spawn" cmd = "nautilus --no-desktop &" [/key]
  [key] mod = {"Super", "Control"} key = "l" func = "spawn" cmd = "i3lock -c 000000 -i $pictures_folder/wallpaper.png" [/key]

  # Screenshots
  [key] mod = {""} key = "Print" func = "spawn" cmd = "scrot -e 'mv $f $pictures_folder/Scrot/$f'" [/key]
  [key] mod = {"Alt"} key = "Print" func = "spawn" cmd = "scrot -u -e 'mv $f $pictures_folder/Scrot/$f'" [/key]
  [key] mod = {"Super"} key = "Print" func = "spawn" cmd = "scrot -e 'mv $f $pictures_folder/Scrot/$f && gimp $pictures_folder/Scrot/$f'" [/key]
  [key] mod = {"Super" + "Alt"} key = "Print" func = "spawn" cmd = "scrot -u -e 'mv $f $pictures_folder/Scrot/$f && gimp $pictures_folder/Scrot/$f'" [/key]

  [key] mod = {""} key = "XF86AudioRaiseVolume" func = "spawn" cmd = "amixer -D pulse sset Master '5%+'" [/key]
  [key] mod = {""} key = "XF86AudioLowerVolume" func = "spawn" cmd = "amixer -D pulse sset Master '5%-'" [/key]
  [key] mod = {""} key = "XF86AudioMute" func = "spawn" cmd = "amixer -D pulse set Master toggle" [/key]



  [key] mod = {"Super", "Shift"} key = "e" func = "spawn" cmd = "~/.config/wmfs/dmenu-quit.sh" [/key]


  # Quit Session
  [key] mod = {"Super", "Alt"} key = "q" func = "quit" [/key]
  # Reload Session
  [key] mod = {"Super", "Shift"} key = "r" func = "reload" [/key]

  [key] mod = {""}               key = "XF86PowerOff"     func = "spawn" cmd = "sudo halt"                            [/key]
  [key] mod = {""}               key = "Help"             func = "spawn" cmd = "sudo reboot"                          [/key]
  [key] mod = {"Super"}          key = "l"                func = "spawn" cmd = "slimlock"                             [/key]
#  [key] mod = {"Super"}          key = "x"                func = "spawn" cmd = "xkill"                                [/key]
#  [key] mod = {"Super"}          key = "c"                func = "client_close"                                       [/key]
#  [key] mod = {"Control", "Alt"} key = "r"                func = "reload"                                             [/key]
#  [key] mod = {""}               key = "XF86HomePage"     func = "quit"                                               [/key]

  [key] mod = {"Alt",}                    key = "g" func = "launcher" cmd = "launcher_goto" [/key]

[/keys]

[layouts]
    fg = "#191919"
    bg = "#7E89A2"

    # Border around the layout button.
    border = true

    # Value menu or switch.
    system = "menu"

    # Value left or right.
    placement = "right"

    # Tiling layouts.
    [layout] type = "tile_right"        symbol = "RIGHT"    [/layout]
    [layout] type = "tile_left"         symbol = "LEFT"     [/layout]
    [layout] type = "tile_top"          symbol = "TOP"      [/layout]
    [layout] type = "tile_bottom"       symbol = "BOTTOM"   [/layout]
    [layout] type = "tile_grid"         symbol = "GRID"     [/layout]
    [layout] type = "mirror_vertical"   symbol = "MIRROR_V" [/layout]
    [layout] type = "mirror_horizontal" symbol = "MIRROR_H" [/layout]

    # Other layouts.
    [layout] type = "max"   symbol = "MAX"  [/layout]
    [layout] type = "free"  symbol = "FREE" [/layout]
[/layouts]
